# Backend Changes

The goal is to cause as little disruption to existing website backends
as possible. Towards this end, a test suite was created from the
internal APIs. 

## Sqlalchemy

Sqlalchemy uses a DTO to represent the data from the database. TM
Admin doesn't used sqlalchemy, it uses psycopg2 instead for direct
access to postgres. Postgres is the only choice because of the Postgis
extension, and it's used for OSM as well. As Sqlalchemy is designed to
support multiple different databases, it has several layers of
abstraction to manage database access. Sqlchemy uses psycopg2 anywhay
when acessing a postgres database.

TM Admin is more low-level, but this also simplifies the data flow by
dropping several layers of abstraction. Much of what backend does is
supply data to the frontend, and let the frontend submit data. Many of
these are a single SQL query, so relatively painless to refactor to
use the TM Admin equivlant.

Some of the higher level backend functions require more complex
interactions with the data, often making several SQL queries.
TM-Admin uses a class generated from the YAML conf file.  As the
actual database column names are used throughout, Instead of an DTO,
it usually a 1 to 1 replacement in the code to use the new data
structure. The main difference between the DTOs and TM Admin is TM
Admin is a superset, so all data from TM is there, it's just accessed
slightly differently.

## Enums

At least in TM, there are many places where an integer is used, and
others the enum value is used. TM Admin enforces the use of the proper
Enum name. This improves security of the code and the readability of
the code as well.
