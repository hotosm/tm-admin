# Changing The Schema

# The configuration file

A simple YAML based config file is used as a single source for all the
data structures. This makes it easier to exchange data between
postgres, protobuf, and python. The format for configuring a schema is
explained in more detail in [this document](configuring.md). Any
changes to the config file are propogated into the different formats.

## The Types files

All of the enums have been extracted from FMTM and TM, and are defined
in the *types.yaml* file. This file must be processed before all the
others, since it defines custom data types all the other files depend
on. 

### types_tm.sql

This file contains the definitions for postgres.

### types_tm.py

This file contains the definitions for python.

### types_tm.proto

This file contains the definitions for gRPC.

## Regenerating the files

After any changes to one of the config files, the various output files
must be generated. A utility program is included to regenerate all the
files, and then updates the database tables too.

	tmadmin-manager.py */*.yaml -v

## Importing Data From Tasking Manager
	
If you have access to an actual postgres database with Tasking Manager
data in it, it can be imported into the *tm-admin* database schema. As
the tm-admin schema was originally based on the TM database schema,
this is mostly a direct copy. The only major change is in the tasking
manager, it only uses the integer value for an array, even when there
is a Enum already for this. This project uses the proper enums
instead, so some conversion is required.

Since the data structure for python is in the *types_tm.py* file,
it's easy to instantiate a class and get the name for the enum from
it's integer value.

	from tm_admin.types_tm import Userrole,
	value = 1
	role = Userrole(value)
	print(role.name)

### Importing the Data

	./tmdb.py -t users -v

